name: MIXER

on:
  workflow_dispatch:
    inputs:
      voice_url:
        description: 'URL mp3/wav с голосом (Cloudinary secure_url)'
        required: false
      job_id:
        description: 'Опционально: ID партии (для ручного запуска)'
        required: false
  repository_dispatch:
    types: [mix, mix_audio]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ffmpeg & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq

      - name: Resolve inputs (VOICE_URL / JOB_ID / MAKE_CALLBACK_URL)
        env:
          SECRET_CALLBACK: ${{ secrets.MAKE_CALLBACK_URL }}
        run: |
          set -e
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Ручной запуск
            if [ -n "${{ github.event.inputs.voice_url }}" ]; then
              echo "VOICE_URL=${{ github.event.inputs.voice_url }}" >> $GITHUB_ENV
            fi
            if [ -n "${{ github.event.inputs.job_id }}" ]; then
              echo "JOB_ID=${{ github.event.inputs.job_id }}" >> $GITHUB_ENV
            else
              echo "JOB_ID=$(date +%s)-$RANDOM" >> $GITHUB_ENV
            fi
            # Колбэк берём из секрета
            echo "MAKE_CALLBACK_URL=$SECRET_CALLBACK" >> $GITHUB_ENV
          else
            # repository_dispatch
            if [ -n "${{ github.event.client_payload.voice_url }}" ]; then
              echo "VOICE_URL=${{ github.event.client_payload.voice_url }}" >> $GITHUB_ENV
            fi
            if [ -n "${{ github.event.client_payload.job_id }}" ]; then
              echo "JOB_ID=${{ github.event.client_payload.job_id }}" >> $GITHUB_ENV
            else
              echo "JOB_ID=$(date +%s)-$RANDOM" >> $GITHUB_ENV
            fi
            if [ -n "${{ github.event.client_payload.make_callback_url }}" ]; then
              echo "MAKE_CALLBACK_URL=${{ github.event.client_payload.make_callback_url }}" >> $GITHUB_ENV
            else
              echo "MAKE_CALLBACK_URL=$SECRET_CALLBACK" >> $GITHUB_ENV
            fi
          fi

      - name: Debug client_payload (for repo_dispatch)
        run: |
          echo 'client_payload JSON:'
          echo '${{ toJSON(github.event.client_payload) }}'

      # === Диагностика №1: проверяем, что секреты заданы ===
      - name: Check required secrets presence
        env:
          INTRO_URL:         ${{ secrets.INTRO_URL }}
          OUTRO_URL:         ${{ secrets.OUTRO_URL }}
          BG_URL:            ${{ secrets.BG_URL }}
          CLD_CLOUD_NAME:    ${{ secrets.CLD_CLOUD_NAME }}
          CLD_UPLOAD_PRESET: ${{ secrets.CLD_UPLOAD_PRESET }}
        run: |
          set -e
          miss=0
          for k in INTRO_URL OUTRO_URL BG_URL CLD_CLOUD_NAME CLD_UPLOAD_PRESET; do
            v="${!k}"
            if [ -z "$v" ]; then
              echo "::error title=Missing secret::$k is empty or not configured"
              miss=1
            fi
          done
          if [ $miss -ne 0 ]; then
            echo "Some secrets are missing. See errors above."; exit 1
          fi
          echo "All required secrets are present."

      # === Диагностика №2: санитизируем и валидируем URL-ы ===
      - name: Validate & sanitize URLs
        env:
          INTRO_URL_RAW: ${{ secrets.INTRO_URL }}
          OUTRO_URL_RAW: ${{ secrets.OUTRO_URL }}
          BG_URL_RAW:    ${{ secrets.BG_URL }}
        run: |
          set -e
          # убираем скрытые \r и пробелы по краям
          VOICE_URL=$(printf "%s" "$VOICE_URL" | tr -d '\r' | xargs)
          INTRO_URL=$(printf "%s" "$INTRO_URL_RAW" | tr -d '\r' | xargs)
          OUTRO_URL=$(printf "%s" "$OUTRO_URL_RAW" | tr -d '\r' | xargs)
          BG_URL=$(printf "%s" "$BG_URL_RAW"       | tr -d '\r' | xargs)

          # публикуем обратно в env
          {
            echo "VOICE_URL=$VOICE_URL"
            echo "INTRO_URL=$INTRO_URL"
            echo "OUTRO_URL=$OUTRO_URL"
            echo "BG_URL=$BG_URL"
          } >> $GITHUB_ENV

          # Проверка VOICE_URL отдельно (самая частая причина падений)
          if [ -z "$VOICE_URL" ]; then
            echo "::error title=Set VOICE_URL (missing URL)::You must pass voice_url in repository_dispatch.client_payload or workflow input"
            exit 1
          fi

          check_url () {
            local name="$1"; local val="$2"
            if [ -z "$val" ]; then
              echo "::error title=$name is empty::Set $name (missing URL)"; exit 1
            fi
            if ! echo "$val" | grep -qi '^https\?://'; then
              echo "::error title=$name invalid::URL must start with http/https, got: $val"; exit 1
            fi
          }

          check_url "VOICE_URL" "$VOICE_URL"
          check_url "INTRO_URL" "$INTRO_URL"
          check_url "OUTRO_URL" "$OUTRO_URL"
          check_url "BG_URL"    "$BG_URL"

          echo "VOICE_URL host: $(echo "$VOICE_URL" | sed -E 's#^(https?://[^/]+).*#\1#')/…"
          echo "Intro/Outro/BG: set ✅"

      - name: Download input files
        run: |
          set -e
          curl -fSL "$VOICE_URL" -o voice.mp3
          curl -fSL "$INTRO_URL" -o intro.mp3
          curl -fSL "$OUTRO_URL" -o outro.mp3
          curl -fSL "$BG_URL"    -o bg.mp3
          ls -lh

      - name: Convert all to WAV 44.1kHz stereo
        run: |
          set -e
          ffmpeg -y -i intro.mp3  -ar 44100 -ac 2 intro.wav
          ffmpeg -y -i outro.mp3  -ar 44100 -ac 2 outro.wav
          ffmpeg -y -i bg.mp3     -ar 44100 -ac 2 bg.wav
          ffmpeg -y -i voice.mp3  -ar 44100 -ac 2 voice.wav

      - name: Lower intro and outro volumes
        run: |
          set -e
          ffmpeg -y -i intro.wav -af "volume=-6dB" intro_low.wav
          ffmpeg -y -i outro.wav -af "volume=-6dB" outro_low.wav

      - name: Loop background to voice duration
        run: |
          set -e
          VDUR=$(ffprobe -v error -show_entries format=duration -of csv=p=0 voice.wav)
          ffmpeg -y -stream_loop -1 -i bg.wav -t "$VDUR" bg_loop.wav

      - name: Mix voice and background (bg louder)
        run: |
          set -e
          ffmpeg -y -i voice.wav -i bg_loop.wav \
            -filter_complex "[0:a]volume=2dB[voice];[1:a]volume=-14dB[bg];[voice][bg]amix=inputs=2:duration=first:dropout_transition=2,aresample=async=1:first_pts=0[aout]" \
            -map "[aout]" -ar 44100 -ac 2 voice_mix.wav

      - name: Concat intro + mixed + outro
        run: |
          set -e
          ffmpeg -y -i intro_low.wav -i voice_mix.wav -i outro_low.wav \
            -filter_complex "[0:a][1:a][2:a]concat=n=3:v=0:a=1[a]" \
            -map "[a]" -ar 44100 -b:a 160k result_premix.mp3

      - name: Loudness normalize to -16 LUFS
        run: |
          set -e
          ffmpeg -y -i result_premix.mp3 -filter:a "loudnorm=I=-16:TP=-1.5:LRA=11" -ar 44100 -b:a 160k result.mp3

      - name: Measure final duration
        run: |
          set -e
          DUR=$(ffprobe -v error -show_entries format=duration -of csv=p=0 result.mp3)
          echo "FINAL_DURATION=$DUR" >> $GITHUB_ENV
          echo "Duration (s): $DUR"

      - name: Upload to Cloudinary
        env:
          CLD_CLOUD_NAME:    ${{ secrets.CLD_CLOUD_NAME }}
          CLD_UPLOAD_PRESET: ${{ secrets.CLD_UPLOAD_PRESET }}
        run: |
          set -e
          URL=$(curl -s -X POST "https://api.cloudinary.com/v1_1/$CLD_CLOUD_NAME/auto/upload" \
            -F file=@result.mp3 \
            -F upload_preset=$CLD_UPLOAD_PRESET \
            -F folder=prokis | jq -r '.secure_url')
          echo "FINAL_URL=$URL" >> $GITHUB_ENV
          echo "Uploaded: $URL"

      - name: Callback to Make
        run: |
          set -e
          echo "Callback -> $MAKE_CALLBACK_URL"
          jq -n \
            --arg job_id "$JOB_ID" \
            --arg final_audio_url "$FINAL_URL" \
            --arg lufs "-16" \
            --arg duration "$FINAL_DURATION" \
            '{job_id:$job_id, final_audio_url:$final_audio_url, lufs:$lufs, duration: ($duration|tonumber)}' \
          | tee payload.json

          curl -s -X POST -H "Content-Type: application/json" \
            -d @payload.json "$MAKE_CALLBACK_URL"
