name: MIXER
on:
  workflow_dispatch:            # ручной запуск из Actions
    inputs:
      voice_url:
        description: "Ссылка на mp3 с голосом (Cloudinary secure_url) — для ручного запуска"
        required: true
        type: string
  push:
    branches: [ main ]          # автозапуск при коммите (для тестов)
  repository_dispatch:
    types: [mix_audio]          # запуск из Make через GitHub API

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install ffmpeg & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq

      - name: Read payload (may be empty on manual run)
        run: |
          echo '${{ toJson(github.event.client_payload) }}' > payload.json
          cat payload.json

      - name: Resolve VOICE_URL (manual input or dispatch payload)
        id: resolve
        run: |
          VOICE_URL="${{ github.event.inputs.voice_url }}"
          if [ -z "$VOICE_URL" ] || [ "$VOICE_URL" = "null" ]; then
            VOICE_URL=$(jq -r '.voice_url // empty' payload.json)
          fi
          if [ -z "$VOICE_URL" ]; then
            echo "❌ VOICE_URL пуст. Передай его в Run workflow ИЛИ из Make через repository_dispatch."
            exit 1
          fi
          echo "VOICE_URL=$VOICE_URL" >> $GITHUB_ENV
          echo "✔ Using VOICE_URL=$VOICE_URL"

      - name: Download input files (with diagnostics)
        env:
          INTRO_URL: ${{ secrets.INTRO_URL }}
          OUTRO_URL: ${{ secrets.OUTRO_URL }}
          BG_URL:    ${{ secrets.BG_URL }}
        run: |
          set -e
          echo "::group::Check URLs"
          echo "INTRO_URL=$INTRO_URL"
          echo "OUTRO_URL=$OUTRO_URL"
          echo "BG_URL=$BG_URL"
          for U in "$VOICE_URL" "$INTRO_URL" "$OUTRO_URL" "$BG_URL"; do
            echo "HEAD $U"
            curl -I -L --max-redirs 5 "$U" | sed -n '1,5p' || true
          done
          echo "::endgroup::"

          echo "::group::Download files"
          curl -fSL "$VOICE_URL" -o voice.mp3
          curl -fSL "$INTRO_URL" -o intro.mp3
          curl -fSL "$OUTRO_URL" -o outro.mp3
          curl -fSL "$BG_URL"    -o bg.mp3
          ls -lh
          echo "::endgroup::"

      - name: Mix voice + background (loop bg, adjust volumes)
        env:
          BG_DB: "-18"      # громкость подложки
          VOICE_DB: "0"     # усиление/ослабление голоса
        run: |
          ffmpeg -y -stream_loop -1 -i bg.mp3 -i voice.mp3 \
            -filter_complex "[0:a]volume=${BG_DB}dB[bg];[bg][1:a]amix=inputs=2:duration=shortest:dropout_transition=2[m];[m]volume=${VOICE_DB}dB[out]" \
            -map "[out]" -shortest -ar 44100 -b:a 128k voice_mix.mp3

      - name: Concatenate intro + mix + outro
        run: |
          printf "file 'intro.mp3'\nfile 'voice_mix.mp3'\nfile 'outro.mp3'\n" > list.txt
          ffmpeg -y -f concat -safe 0 -i list.txt -c copy result.mp3 || \
          ffmpeg -y -i intro.mp3 -i voice_mix.mp3 -i outro.mp3 \
            -filter_complex "[0:a][1:a][2:a]concat=n=3:v=0:a=1[out]" \
            -map "[out]" -ar 44100 -b:a 128k result.mp3
          ls -lh result.mp3

      - name: Upload to Cloudinary (unsigned preset)
        env:
          CLD_CLOUD_NAME:   ${{ secrets.CLD_CLOUD_NAME }}
          CLD_UPLOAD_PRESET:${{ secrets.CLD_UPLOAD_PRESET }}
        run: |
          set -e
          if [ -z "$CLD_CLOUD_NAME" ] || [ -z "$CLD_UPLOAD_PRESET" ]; then
            echo "❌ Missing CLD_CLOUD_NAME or CLD_UPLOAD_PRESET secrets"; exit 1
          fi
          echo "✔ Uploading with unsigned preset '$CLD_UPLOAD_PRESET' to cloud '$CLD_CLOUD_NAME'"
          curl -sS -X POST "https://api.cloudinary.com/v1_1/$CLD_CLOUD_NAME/auto/upload" \
            -F file=@result.mp3 \
            -F upload_preset=$CLD_UPLOAD_PRESET \
            -F folder=prokis \
            -w "\nHTTP %{http_code}\n" \
            -o cld.json
          cat cld.json
          URL=$(jq -r '.secure_url // empty' cld.json)
          if [ -z "$URL" ] || [ "$URL" = "null" ]; then
            echo "❌ Cloudinary unsigned upload failed"; exit 1
          fi
          echo "FINAL_URL=$URL" >> $GITHUB_ENV
          echo "✅ Uploaded: $URL"

      - name: Callback to Make
        env:
          MAKE_CALLBACK_URL: ${{ secrets.MAKE_CALLBACK_URL }}
        run: |
          curl -fSL -X POST -H "Content-Type: application/json" \
            -d "{\"final_url\":\"$FINAL_URL\"}" "$MAKE_CALLBACK_URL"
